name: CI Build Major Branch Keymap

permissions:
  contents: read
  actions: write

on:
  workflow_call:
    inputs:
      branch:
        type: string
        required: true
      keymap:
        type: string
        required: true
      slice_length:
        type: string
        required: true

jobs:
  generate_targets:
    name: "Generate targets (${{ inputs.keymap }})"
    runs-on: ubuntu-latest
    container: ghcr.io/qmk/qmk_cli

    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}

    steps:
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y jq

      - name: Checkout QMK Firmware
        uses: actions/checkout@v4

      - name: Generate build matrix
        id: generate_matrix
        run: |
          matrix=$(qmk find -km ${{ inputs.keymap }} 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map({keyboard: (split(":")[0]), keymap: "${{ inputs.keymap }}"})' )
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  build_firmware:
    name: "Build ${{ matrix.keyboard }}:${{ matrix.keymap }}"
    needs: generate_targets
    runs-on: ubuntu-latest
    container: ghcr.io/qmk/qmk_cli
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.generate_targets.outputs.matrix)}}

    steps:
      - name: Disable safe.directory check
        run: git config --global --add safe.directory '*'

      - name: Checkout QMK Firmware
        uses: actions/checkout@v4

      - name: Cache QMK dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .build
          key: ${{ runner.os }}-qmk-${{ hashFiles('**/*.mk') }}
          restore-keys: |
            ${{ runner.os }}-qmk-

      - name: Install dependencies
        run: pip3 install -r requirements.txt

      - name: Run build
        run: |
          make ${{ matrix.keyboard }}:${{ matrix.keymap }} DUMP_CI_METADATA=yes -j$(nproc)

      - name: Archive firmware
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ matrix.keyboard }}_${{ matrix.keymap }}
          path: |
            *.hex
            *.bin
            *.uf2

  collect_firmware:
    if: always()
    name: "Collect firmware"
    needs: build_firmware
    runs-on: ubuntu-latest

    steps:
      - name: Download all firmware
        uses: actions/download-artifact@v4
        with:
          path: firmware
          pattern: '*_*'
          merge-multiple: true

      - name: Repack firmware
        run: |
          mkdir collected
          find firmware -type f -name '*.hex' -o -name '*.bin' -o -name '*.uf2' | while read file; do
            cp "$file" collected/
          done

      - name: Upload collected firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ inputs.keymap }}
          path: collected

      - name: Generate output logs
        run: |
          find firmware -type f -name '*.log' -exec cat {} + > build_logs.txt
          echo '```' > $GITHUB_STEP_SUMMARY
          cat build_logs.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Delete individual firmware artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: '*_*'
          failOnError: false
